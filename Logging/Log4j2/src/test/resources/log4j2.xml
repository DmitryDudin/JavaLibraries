<?xml version="1.0" encoding="UTF-8"?>
<Configuration monitorInterval="5">
    <Appenders>

        <Console name="Console" target="SYSTEM_OUT">
            <!--<PatternLayout pattern="[%d] [%t] %-5level %logger{36} - %msg%n"/>-->
            <PatternLayout pattern="%d{ISO8601} [%-5p][%-10.10t][%32.32c]%x%X - %m%n"/>
        </Console>

        <File name="fileBranch1" fileName="log/branch1.txt">
            <PatternLayout>
                <Pattern>%d %p %c %m %ex{2}%x%X %n</Pattern>
            </PatternLayout>
        </File>
        <File name="fileBranch2" fileName="log/branch2.txt">
            <PatternLayout>
                <Pattern>%d %p %c %m %ex{2}%x%X %n</Pattern>
            </PatternLayout>
        </File>

        <File name="fileBranch3" fileName="log/branch3.txt">
            <PatternLayout>
                <Pattern>%d %p %c %m %ex{2}%x%X %n</Pattern>
            </PatternLayout>
        </File>

        <File name="fileBranch3_1_debug" fileName="log/fileBranch3_1_debug.log">
            <PatternLayout>
                <Pattern>%d{ISO8601} [%-5p][%-16.10t][%32.32c]%x%X - %m%n</Pattern>
            </PatternLayout>
        </File>
        <File name="fileBranch3_1_info" fileName="log/fileBranch3_1_info.log">
            <ThresholdFilter level="info" onMatch="ACCEPT" onMismatch="DENY"/>
            <PatternLayout>
                <Pattern>%d{ISO8601} [%-5p][%-16.10t][%32.32c]%x%X - %m%n</Pattern>
            </PatternLayout>
        </File>
        <File name="fileBranch3_1_error" fileName="log/fileBranch3_1_error.log">
            <ThresholdFilter level="error" onMatch="ACCEPT" onMismatch="DENY"/>
            <PatternLayout>
                <Pattern>%d{ISO8601} [%-5p][%-16.10t][%32.32c]%x%X - %m%n</Pattern>
            </PatternLayout>
        </File>


        <!--<File name="rootFile" fileName="log/rootFile.txt">
            <PatternLayout>
                <Pattern>[%d] %p %c %m %ex{2} %n</Pattern>
            </PatternLayout>
        </File>
        <Async name="AsyncRoot">
            <AppenderRef ref="rootFile"/>
        </Async>-->

        <RollingFile name="rootFile" fileName="log/rootLog.log">
            <FilePattern>log/rootLog-%d{yyyy-MM-dd-HH}-%i.log.gz</FilePattern>
            <PatternLayout>
                <Pattern>
                    %d{ISO8601} [%-5p][%-10.10t][%32.32c]%x%X - %m%n
                </Pattern>
            </PatternLayout>
            <Policies>
                <SizeBasedTriggeringPolicy size="50 KB"/>
            </Policies>
            <DefaultRolloverStrategy max="5"/>
        </RollingFile>
        <Async name="AsyncRoot">
            <AppenderRef ref="rootFile"/>
        </Async>

        <File name="rootFileErrors" fileName="log/rootFileErrors.log">
            <ThresholdFilter level="error" onMatch="ACCEPT" onMismatch="DENY"/>
            <PatternLayout>
                <Pattern>%d{ISO8601} [%-5p][%-16.16t][%32.32c]%x%X - %m%n</Pattern>
            </PatternLayout>
        </File>

        <RollingFile name="rootFileRegexFilter" fileName="log/rootFileRegexFilter.log">
            <RegexFilter regex=".*2.*" onMatch="ACCEPT" onMismatch="DENY"/> <!--filter message with "2" in message-->
            <FilePattern>log/rootLog-%d{yyyy-MM-dd-HH}-%i.log.gz</FilePattern>
            <PatternLayout>
                <Pattern>
                    %d{ISO8601} [%-5p][%-10.10t][%32.32c]%x%X - %m%n
                </Pattern>
            </PatternLayout>
            <Policies>
                <SizeBasedTriggeringPolicy size="50 KB"/>
            </Policies>
            <DefaultRolloverStrategy max="5"/>
        </RollingFile>

    </Appenders>

    <Loggers>
        <!--<Logger name="ua.org.javatraining" level="INFO"/>-->

        <!--<Logger name="ua.org.javatraining.branch1" level="info" additivity="true">
            <AppenderRef ref="Console"/>
        </Logger>-->

        <Logger name="ua.org.javatraining.branch1" level="trace" additivity="false">
            <AppenderRef ref="fileBranch1"/>
        </Logger>

        <Logger name="ua.org.javatraining.branch2" level="info" additivity="true">
            <AppenderRef ref="fileBranch2"/>
            <AppenderRef ref="Console"/>
        </Logger>

        <Logger name="ua.org.javatraining.branch3" level="error" additivity="true">
            <AppenderRef ref="fileBranch3"/>
        </Logger>

        <Logger name="ua.org.javatraining.branch3.branch3_1" level="debug" additivity="true">
            <AppenderRef ref="fileBranch3_1_debug"/>
            <AppenderRef ref="fileBranch3_1_info"/>
            <AppenderRef ref="fileBranch3_1_error"/>
        </Logger>


        <Root level="debug">
            <AppenderRef ref="Console"/>
            <AppenderRef ref="AsyncRoot"/>
            <AppenderRef ref="rootFileErrors"/>
            <AppenderRef ref="rootFileRegexFilter"/>
        </Root>
    </Loggers>
</Configuration>

        <!--

******************
PatternLayout:

%n - next line
%d{'format'}  - date/time format
%p  - LOG level
%c{1.2.3.4}  -  Outputs the name of the logger that published the logging event, %c{precision}  {1.2.3.4}  {                                                                                                2}
[%t]  -  thread name (  '[]'  - decoration)
%ex  - log exception
%l  - location
%x  - Outputs the Thread Context Stack (also known as the Nested Diagnostic Context or NDC)
%X  - Outputs the Thread Context Map (also known as the Mapped Diagnostic Context or MDC)
******************
Logging levels:

Standard Level 	intLevel
OFF 	        0
FATAL 	        100
ERROR 	        200
WARN 	        300
INFO 	        400
DEBUG 	        500
TRACE       	600
ALL 	        Integer.MAX_VALUE

ThresholdFilter added to appender set log level despite the level of the logger =>
there is an opportunity to set different appender levels for the same package level
(Можно сконфигурировать вывод так, чтобы в один аппендер сообщения от определенного логгера
выводились на одном уровне, а в другой на другом)

 The Thread Context Map is the equivalent of the MDC and the Thread Context Stack is the equivalent of the NDC.
Since key/value pairs are more flexible, the Thread Context Map is recommended.


        -->